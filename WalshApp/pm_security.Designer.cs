//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WalshApp {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("pm_security")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class pm_security : global::System.Data.DataSet {
        
        private pm_securityDataTable tablepm_security;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public pm_security() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected pm_security(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["pm_security"] != null)) {
                    base.Tables.Add(new pm_securityDataTable(ds.Tables["pm_security"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pm_securityDataTable _pm_security {
            get {
                return this.tablepm_security;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            pm_security cln = ((pm_security)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["pm_security"] != null)) {
                    base.Tables.Add(new pm_securityDataTable(ds.Tables["pm_security"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablepm_security = ((pm_securityDataTable)(base.Tables["pm_security"]));
            if ((initTable == true)) {
                if ((this.tablepm_security != null)) {
                    this.tablepm_security.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "pm_security";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/pm_security.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablepm_security = new pm_securityDataTable();
            base.Tables.Add(this.tablepm_security);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_pm_security() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            pm_security ds = new pm_security();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void pm_securityRowChangeEventHandler(object sender, pm_securityRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pm_securityDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnobject_id;
            
            private global::System.Data.DataColumn columnaccessor_id;
            
            private global::System.Data.DataColumn columnaccessor_type;
            
            private global::System.Data.DataColumn columnax_read;
            
            private global::System.Data.DataColumn columnax_write;
            
            private global::System.Data.DataColumn columnax_view_info;
            
            private global::System.Data.DataColumn columnax_comment;
            
            private global::System.Data.DataColumn columnax_read_historical;
            
            private global::System.Data.DataColumn columnax_manage_historical;
            
            private global::System.Data.DataColumn columnax_rename;
            
            private global::System.Data.DataColumn columnax_delete;
            
            private global::System.Data.DataColumn columnax_copy;
            
            private global::System.Data.DataColumn columnax_chmod;
            
            private global::System.Data.DataColumn columnax_chown;
            
            private global::System.Data.DataColumn columnid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pm_securityDataTable() {
                this.TableName = "pm_security";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pm_securityDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pm_securityDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn object_idColumn {
                get {
                    return this.columnobject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accessor_idColumn {
                get {
                    return this.columnaccessor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn accessor_typeColumn {
                get {
                    return this.columnaccessor_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_readColumn {
                get {
                    return this.columnax_read;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_writeColumn {
                get {
                    return this.columnax_write;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_view_infoColumn {
                get {
                    return this.columnax_view_info;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_commentColumn {
                get {
                    return this.columnax_comment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_read_historicalColumn {
                get {
                    return this.columnax_read_historical;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_manage_historicalColumn {
                get {
                    return this.columnax_manage_historical;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_renameColumn {
                get {
                    return this.columnax_rename;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_deleteColumn {
                get {
                    return this.columnax_delete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_copyColumn {
                get {
                    return this.columnax_copy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_chmodColumn {
                get {
                    return this.columnax_chmod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ax_chownColumn {
                get {
                    return this.columnax_chown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pm_securityRow this[int index] {
                get {
                    return ((pm_securityRow)(this.Rows[index]));
                }
            }
            
            public event pm_securityRowChangeEventHandler pm_securityRowChanging;
            
            public event pm_securityRowChangeEventHandler pm_securityRowChanged;
            
            public event pm_securityRowChangeEventHandler pm_securityRowDeleting;
            
            public event pm_securityRowChangeEventHandler pm_securityRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addpm_securityRow(pm_securityRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pm_securityRow Addpm_securityRow(uint object_id, uint accessor_id, string accessor_type, string ax_read, string ax_write, string ax_view_info, string ax_comment, string ax_read_historical, string ax_manage_historical, string ax_rename, string ax_delete, string ax_copy, string ax_chmod, string ax_chown) {
                pm_securityRow rowpm_securityRow = ((pm_securityRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        object_id,
                        accessor_id,
                        accessor_type,
                        ax_read,
                        ax_write,
                        ax_view_info,
                        ax_comment,
                        ax_read_historical,
                        ax_manage_historical,
                        ax_rename,
                        ax_delete,
                        ax_copy,
                        ax_chmod,
                        ax_chown,
                        null};
                rowpm_securityRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpm_securityRow);
                return rowpm_securityRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pm_securityRow FindByid(int id) {
                return ((pm_securityRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                pm_securityDataTable cln = ((pm_securityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new pm_securityDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnobject_id = base.Columns["object_id"];
                this.columnaccessor_id = base.Columns["accessor_id"];
                this.columnaccessor_type = base.Columns["accessor_type"];
                this.columnax_read = base.Columns["ax_read"];
                this.columnax_write = base.Columns["ax_write"];
                this.columnax_view_info = base.Columns["ax_view_info"];
                this.columnax_comment = base.Columns["ax_comment"];
                this.columnax_read_historical = base.Columns["ax_read_historical"];
                this.columnax_manage_historical = base.Columns["ax_manage_historical"];
                this.columnax_rename = base.Columns["ax_rename"];
                this.columnax_delete = base.Columns["ax_delete"];
                this.columnax_copy = base.Columns["ax_copy"];
                this.columnax_chmod = base.Columns["ax_chmod"];
                this.columnax_chown = base.Columns["ax_chown"];
                this.columnid = base.Columns["id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnobject_id = new global::System.Data.DataColumn("object_id", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobject_id);
                this.columnaccessor_id = new global::System.Data.DataColumn("accessor_id", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccessor_id);
                this.columnaccessor_type = new global::System.Data.DataColumn("accessor_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccessor_type);
                this.columnax_read = new global::System.Data.DataColumn("ax_read", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_read);
                this.columnax_write = new global::System.Data.DataColumn("ax_write", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_write);
                this.columnax_view_info = new global::System.Data.DataColumn("ax_view_info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_view_info);
                this.columnax_comment = new global::System.Data.DataColumn("ax_comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_comment);
                this.columnax_read_historical = new global::System.Data.DataColumn("ax_read_historical", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_read_historical);
                this.columnax_manage_historical = new global::System.Data.DataColumn("ax_manage_historical", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_manage_historical);
                this.columnax_rename = new global::System.Data.DataColumn("ax_rename", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_rename);
                this.columnax_delete = new global::System.Data.DataColumn("ax_delete", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_delete);
                this.columnax_copy = new global::System.Data.DataColumn("ax_copy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_copy);
                this.columnax_chmod = new global::System.Data.DataColumn("ax_chmod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_chmod);
                this.columnax_chown = new global::System.Data.DataColumn("ax_chown", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnax_chown);
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnobject_id.AllowDBNull = false;
                this.columnaccessor_id.AllowDBNull = false;
                this.columnaccessor_type.AllowDBNull = false;
                this.columnaccessor_type.MaxLength = 24;
                this.columnax_read.AllowDBNull = false;
                this.columnax_read.MaxLength = 21;
                this.columnax_write.AllowDBNull = false;
                this.columnax_write.MaxLength = 21;
                this.columnax_view_info.AllowDBNull = false;
                this.columnax_view_info.MaxLength = 21;
                this.columnax_comment.AllowDBNull = false;
                this.columnax_comment.MaxLength = 21;
                this.columnax_read_historical.AllowDBNull = false;
                this.columnax_read_historical.MaxLength = 21;
                this.columnax_manage_historical.AllowDBNull = false;
                this.columnax_manage_historical.MaxLength = 21;
                this.columnax_rename.AllowDBNull = false;
                this.columnax_rename.MaxLength = 21;
                this.columnax_delete.AllowDBNull = false;
                this.columnax_delete.MaxLength = 21;
                this.columnax_copy.AllowDBNull = false;
                this.columnax_copy.MaxLength = 21;
                this.columnax_chmod.AllowDBNull = false;
                this.columnax_chmod.MaxLength = 21;
                this.columnax_chown.AllowDBNull = false;
                this.columnax_chown.MaxLength = 21;
                this.columnid.AutoIncrement = true;
                this.columnid.AutoIncrementSeed = -1;
                this.columnid.AutoIncrementStep = -1;
                this.columnid.AllowDBNull = false;
                this.columnid.Unique = true;
                this.ExtendedProperties.Add("Generator_TablePropName", "_pm_security");
                this.ExtendedProperties.Add("Generator_UserTableName", "pm_security");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pm_securityRow Newpm_securityRow() {
                return ((pm_securityRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new pm_securityRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(pm_securityRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pm_securityRowChanged != null)) {
                    this.pm_securityRowChanged(this, new pm_securityRowChangeEvent(((pm_securityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pm_securityRowChanging != null)) {
                    this.pm_securityRowChanging(this, new pm_securityRowChangeEvent(((pm_securityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pm_securityRowDeleted != null)) {
                    this.pm_securityRowDeleted(this, new pm_securityRowChangeEvent(((pm_securityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pm_securityRowDeleting != null)) {
                    this.pm_securityRowDeleting(this, new pm_securityRowChangeEvent(((pm_securityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removepm_securityRow(pm_securityRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                pm_security ds = new pm_security();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pm_securityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class pm_securityRow : global::System.Data.DataRow {
            
            private pm_securityDataTable tablepm_security;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pm_securityRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepm_security = ((pm_securityDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint object_id {
                get {
                    return ((uint)(this[this.tablepm_security.object_idColumn]));
                }
                set {
                    this[this.tablepm_security.object_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public uint accessor_id {
                get {
                    return ((uint)(this[this.tablepm_security.accessor_idColumn]));
                }
                set {
                    this[this.tablepm_security.accessor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string accessor_type {
                get {
                    return ((string)(this[this.tablepm_security.accessor_typeColumn]));
                }
                set {
                    this[this.tablepm_security.accessor_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_read {
                get {
                    return ((string)(this[this.tablepm_security.ax_readColumn]));
                }
                set {
                    this[this.tablepm_security.ax_readColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_write {
                get {
                    return ((string)(this[this.tablepm_security.ax_writeColumn]));
                }
                set {
                    this[this.tablepm_security.ax_writeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_view_info {
                get {
                    return ((string)(this[this.tablepm_security.ax_view_infoColumn]));
                }
                set {
                    this[this.tablepm_security.ax_view_infoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_comment {
                get {
                    return ((string)(this[this.tablepm_security.ax_commentColumn]));
                }
                set {
                    this[this.tablepm_security.ax_commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_read_historical {
                get {
                    return ((string)(this[this.tablepm_security.ax_read_historicalColumn]));
                }
                set {
                    this[this.tablepm_security.ax_read_historicalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_manage_historical {
                get {
                    return ((string)(this[this.tablepm_security.ax_manage_historicalColumn]));
                }
                set {
                    this[this.tablepm_security.ax_manage_historicalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_rename {
                get {
                    return ((string)(this[this.tablepm_security.ax_renameColumn]));
                }
                set {
                    this[this.tablepm_security.ax_renameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_delete {
                get {
                    return ((string)(this[this.tablepm_security.ax_deleteColumn]));
                }
                set {
                    this[this.tablepm_security.ax_deleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_copy {
                get {
                    return ((string)(this[this.tablepm_security.ax_copyColumn]));
                }
                set {
                    this[this.tablepm_security.ax_copyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_chmod {
                get {
                    return ((string)(this[this.tablepm_security.ax_chmodColumn]));
                }
                set {
                    this[this.tablepm_security.ax_chmodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ax_chown {
                get {
                    return ((string)(this[this.tablepm_security.ax_chownColumn]));
                }
                set {
                    this[this.tablepm_security.ax_chownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tablepm_security.idColumn]));
                }
                set {
                    this[this.tablepm_security.idColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class pm_securityRowChangeEvent : global::System.EventArgs {
            
            private pm_securityRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pm_securityRowChangeEvent(pm_securityRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pm_securityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WalshApp.pm_securityTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class pm_securityTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public pm_securityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "pm_security";
            tableMapping.ColumnMappings.Add("object_id", "object_id");
            tableMapping.ColumnMappings.Add("accessor_id", "accessor_id");
            tableMapping.ColumnMappings.Add("accessor_type", "accessor_type");
            tableMapping.ColumnMappings.Add("ax_read", "ax_read");
            tableMapping.ColumnMappings.Add("ax_write", "ax_write");
            tableMapping.ColumnMappings.Add("ax_view_info", "ax_view_info");
            tableMapping.ColumnMappings.Add("ax_comment", "ax_comment");
            tableMapping.ColumnMappings.Add("ax_read_historical", "ax_read_historical");
            tableMapping.ColumnMappings.Add("ax_manage_historical", "ax_manage_historical");
            tableMapping.ColumnMappings.Add("ax_rename", "ax_rename");
            tableMapping.ColumnMappings.Add("ax_delete", "ax_delete");
            tableMapping.ColumnMappings.Add("ax_copy", "ax_copy");
            tableMapping.ColumnMappings.Add("ax_chmod", "ax_chmod");
            tableMapping.ColumnMappings.Add("ax_chown", "ax_chown");
            tableMapping.ColumnMappings.Add("id", "id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `walshco`.`pm_security` WHERE ((`object_id` = @Original_object_id) AND (`accessor_id` = @Original_accessor_id) AND (`accessor_type` = @Original_accessor_type) AND (`ax_read` = @Original_ax_read) AND (`ax_write` = @Original_ax_write) AND (`ax_view_info` = @Original_ax_view_info) AND (`ax_comment` = @Original_ax_comment) AND (`ax_read_historical` = @Original_ax_read_historical) AND (`ax_manage_historical` = @Original_ax_manage_historical) AND (`ax_rename` = @Original_ax_rename) AND (`ax_delete` = @Original_ax_delete) AND (`ax_copy` = @Original_ax_copy) AND (`ax_chmod` = @Original_ax_chmod) AND (`ax_chown` = @Original_ax_chown) AND (`id` = @Original_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::MySql.Data.MySqlClient.MySqlParameter param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_object_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "object_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_accessor_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "accessor_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_accessor_type";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.String;
            param.IsNullable = true;
            param.SourceColumn = "accessor_type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_read";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_write";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_write";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_view_info";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_view_info";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_comment";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_comment";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_read_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read_historical";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_manage_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_manage_historical";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_rename";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_rename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_delete";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_delete";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_copy";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_copy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_chmod";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chmod";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_chown";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chown";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `walshco`.`pm_security` (`object_id`, `accessor_id`, `accessor_type`, `ax_read`, `ax_write`, `ax_view_info`, `ax_comment`, `ax_read_historical`, `ax_manage_historical`, `ax_rename`, `ax_delete`, `ax_copy`, `ax_chmod`, `ax_chown`) VALUES (@object_id, @accessor_id, @accessor_type, @ax_read, @ax_write, @ax_view_info, @ax_comment, @ax_read_historical, @ax_manage_historical, @ax_rename, @ax_delete, @ax_copy, @ax_chmod, @ax_chown)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@object_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "object_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@accessor_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "accessor_id";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@accessor_type";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.String;
            param.IsNullable = true;
            param.SourceColumn = "accessor_type";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_read";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_write";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_write";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_view_info";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_view_info";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_comment";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_comment";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_read_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read_historical";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_manage_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_manage_historical";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_rename";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_rename";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_delete";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_delete";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_copy";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_copy";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_chmod";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chmod";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_chown";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chown";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `walshco`.`pm_security` SET `object_id` = @object_id, `accessor_id` = @accessor_id, `accessor_type` = @accessor_type, `ax_read` = @ax_read, `ax_write` = @ax_write, `ax_view_info` = @ax_view_info, `ax_comment` = @ax_comment, `ax_read_historical` = @ax_read_historical, `ax_manage_historical` = @ax_manage_historical, `ax_rename` = @ax_rename, `ax_delete` = @ax_delete, `ax_copy` = @ax_copy, `ax_chmod` = @ax_chmod, `ax_chown` = @ax_chown WHERE ((`object_id` = @Original_object_id) AND (`accessor_id` = @Original_accessor_id) AND (`accessor_type` = @Original_accessor_type) AND (`ax_read` = @Original_ax_read) AND (`ax_write` = @Original_ax_write) AND (`ax_view_info` = @Original_ax_view_info) AND (`ax_comment` = @Original_ax_comment) AND (`ax_read_historical` = @Original_ax_read_historical) AND (`ax_manage_historical` = @Original_ax_manage_historical) AND (`ax_rename` = @Original_ax_rename) AND (`ax_delete` = @Original_ax_delete) AND (`ax_copy` = @Original_ax_copy) AND (`ax_chmod` = @Original_ax_chmod) AND (`ax_chown` = @Original_ax_chown) AND (`id` = @Original_id))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@object_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "object_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@accessor_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "accessor_id";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@accessor_type";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.String;
            param.IsNullable = true;
            param.SourceColumn = "accessor_type";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_read";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_write";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_write";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_view_info";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_view_info";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_comment";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_comment";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_read_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read_historical";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_manage_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_manage_historical";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_rename";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_rename";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_delete";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_delete";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_copy";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_copy";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_chmod";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chmod";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@ax_chown";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chown";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_object_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "object_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_accessor_id";
            param.DbType = global::System.Data.DbType.UInt32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.UInt32;
            param.IsNullable = true;
            param.SourceColumn = "accessor_id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_accessor_type";
            param.DbType = global::System.Data.DbType.StringFixedLength;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.String;
            param.IsNullable = true;
            param.SourceColumn = "accessor_type";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_read";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_write";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_write";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_view_info";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_view_info";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_comment";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_comment";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_read_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_read_historical";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_manage_historical";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_manage_historical";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_rename";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_rename";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_delete";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_delete";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_copy";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_copy";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_chmod";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chmod";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_ax_chown";
            param.DbType = global::System.Data.DbType.SByte;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Byte;
            param.IsNullable = true;
            param.SourceColumn = "ax_chown";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::MySql.Data.MySqlClient.MySqlParameter();
            param.ParameterName = "@Original_id";
            param.DbType = global::System.Data.DbType.Int32;
            param.MySqlDbType = global::MySql.Data.MySqlClient.MySqlDbType.Int32;
            param.IsNullable = true;
            param.SourceColumn = "id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::WalshApp.Properties.Settings.Default.walshcoConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT object_id, accessor_id, accessor_type, ax_read, ax_write, ax_view_info, ax" +
                "_comment, ax_read_historical, ax_manage_historical, ax_rename, ax_delete, ax_cop" +
                "y, ax_chmod, ax_chown, id FROM pm_security";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(pm_security.pm_securityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual pm_security.pm_securityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            pm_security.pm_securityDataTable dataTable = new pm_security.pm_securityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(pm_security.pm_securityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(pm_security dataSet) {
            return this.Adapter.Update(dataSet, "pm_security");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(uint Original_object_id, uint Original_accessor_id, string Original_accessor_type, byte Original_ax_read, byte Original_ax_write, byte Original_ax_view_info, byte Original_ax_comment, byte Original_ax_read_historical, byte Original_ax_manage_historical, byte Original_ax_rename, byte Original_ax_delete, byte Original_ax_copy, byte Original_ax_chmod, byte Original_ax_chown, int Original_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((uint)(Original_object_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((uint)(Original_accessor_id));
            if ((Original_accessor_type == null)) {
                throw new global::System.ArgumentNullException("Original_accessor_type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_accessor_type));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((byte)(Original_ax_read));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((byte)(Original_ax_write));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((byte)(Original_ax_view_info));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((byte)(Original_ax_comment));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((byte)(Original_ax_read_historical));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((byte)(Original_ax_manage_historical));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((byte)(Original_ax_rename));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((byte)(Original_ax_delete));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((byte)(Original_ax_copy));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((byte)(Original_ax_chmod));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((byte)(Original_ax_chown));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(uint object_id, uint accessor_id, string accessor_type, byte ax_read, byte ax_write, byte ax_view_info, byte ax_comment, byte ax_read_historical, byte ax_manage_historical, byte ax_rename, byte ax_delete, byte ax_copy, byte ax_chmod, byte ax_chown) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((uint)(object_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((uint)(accessor_id));
            if ((accessor_type == null)) {
                throw new global::System.ArgumentNullException("accessor_type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(accessor_type));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((byte)(ax_read));
            this.Adapter.InsertCommand.Parameters[4].Value = ((byte)(ax_write));
            this.Adapter.InsertCommand.Parameters[5].Value = ((byte)(ax_view_info));
            this.Adapter.InsertCommand.Parameters[6].Value = ((byte)(ax_comment));
            this.Adapter.InsertCommand.Parameters[7].Value = ((byte)(ax_read_historical));
            this.Adapter.InsertCommand.Parameters[8].Value = ((byte)(ax_manage_historical));
            this.Adapter.InsertCommand.Parameters[9].Value = ((byte)(ax_rename));
            this.Adapter.InsertCommand.Parameters[10].Value = ((byte)(ax_delete));
            this.Adapter.InsertCommand.Parameters[11].Value = ((byte)(ax_copy));
            this.Adapter.InsertCommand.Parameters[12].Value = ((byte)(ax_chmod));
            this.Adapter.InsertCommand.Parameters[13].Value = ((byte)(ax_chown));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    uint object_id, 
                    uint accessor_id, 
                    string accessor_type, 
                    byte ax_read, 
                    byte ax_write, 
                    byte ax_view_info, 
                    byte ax_comment, 
                    byte ax_read_historical, 
                    byte ax_manage_historical, 
                    byte ax_rename, 
                    byte ax_delete, 
                    byte ax_copy, 
                    byte ax_chmod, 
                    byte ax_chown, 
                    uint Original_object_id, 
                    uint Original_accessor_id, 
                    string Original_accessor_type, 
                    byte Original_ax_read, 
                    byte Original_ax_write, 
                    byte Original_ax_view_info, 
                    byte Original_ax_comment, 
                    byte Original_ax_read_historical, 
                    byte Original_ax_manage_historical, 
                    byte Original_ax_rename, 
                    byte Original_ax_delete, 
                    byte Original_ax_copy, 
                    byte Original_ax_chmod, 
                    byte Original_ax_chown, 
                    int Original_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((uint)(object_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((uint)(accessor_id));
            if ((accessor_type == null)) {
                throw new global::System.ArgumentNullException("accessor_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(accessor_type));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((byte)(ax_read));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((byte)(ax_write));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((byte)(ax_view_info));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((byte)(ax_comment));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((byte)(ax_read_historical));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((byte)(ax_manage_historical));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((byte)(ax_rename));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((byte)(ax_delete));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((byte)(ax_copy));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((byte)(ax_chmod));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((byte)(ax_chown));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((uint)(Original_object_id));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((uint)(Original_accessor_id));
            if ((Original_accessor_type == null)) {
                throw new global::System.ArgumentNullException("Original_accessor_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_accessor_type));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((byte)(Original_ax_read));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((byte)(Original_ax_write));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((byte)(Original_ax_view_info));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((byte)(Original_ax_comment));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((byte)(Original_ax_read_historical));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((byte)(Original_ax_manage_historical));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((byte)(Original_ax_rename));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((byte)(Original_ax_delete));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((byte)(Original_ax_copy));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((byte)(Original_ax_chmod));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((byte)(Original_ax_chown));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private pm_securityTableAdapter _pm_securityTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public pm_securityTableAdapter pm_securityTableAdapter {
            get {
                return this._pm_securityTableAdapter;
            }
            set {
                if (((this._pm_securityTableAdapter != null) 
                            && (this.TableAdapterInstanceCount == 1))) {
                    this._pm_securityTableAdapter = value;
                    return;
                }
                if (((value != null) 
                            && (this.MatchTableAdapterConnection(value.Connection) == false))) {
                    throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                            "tring.");
                }
                this._pm_securityTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._pm_securityTableAdapter != null) 
                            && (this._pm_securityTableAdapter.Connection != null))) {
                    return this._pm_securityTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._pm_securityTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(pm_security dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pm_securityTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet._pm_security.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pm_securityTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(pm_security dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pm_securityTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet._pm_security.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pm_securityTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(pm_security dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._pm_securityTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet._pm_security.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pm_securityTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(pm_security dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Closed) 
                        == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._pm_securityTableAdapter != null)) {
                    revertConnections.Add(this._pm_securityTableAdapter, this._pm_securityTableAdapter.Connection);
                    this._pm_securityTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(workConnection));
                    this._pm_securityTableAdapter.Transaction = ((global::MySql.Data.MySqlClient.MySqlTransaction)(workTransaction));
                    if (this._pm_securityTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pm_securityTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pm_securityTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._pm_securityTableAdapter != null)) {
                    this._pm_securityTableAdapter.Connection = ((global::MySql.Data.MySqlClient.MySqlConnection)(revertConnections[this._pm_securityTableAdapter]));
                    this._pm_securityTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591